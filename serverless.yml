service: serverless-http-api-typescript-dynamodb

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev
  tracing:
    lambda: true
    apiGateway: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/StarWarsRequests
        - arn:aws:dynamodb:${self:provider.region}:*:table/Orders
        - arn:aws:dynamodb:${self:provider.region}:*:table/CacheTable

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-dynamodb
  - serverless-api-gateway-throttling

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  apiGatewayThrottling:
    maxRequestsPerSecond: 2
    maxConcurrentRequests: 2

functions:
  merged:
    handler: src/handlers/merged.merged
    memorySize: 1024       
    timeout: 10             
    tracing: true
    events:
      - httpApi:
          path: /merged
          method: get
    environment:
      DYNAMODB_TABLE: StarWarsRequests
      DYNAMODB_CACHE_TABLE: CacheTable

  getHistory:
    handler: src/handlers/getHistory.getHistory
    memorySize: 1024        
    timeout: 10             
    tracing: true
    events:
      - httpApi:
          path: /history
          method: get
    environment:
      DYNAMODB_TABLE: StarWarsRequests
      DYNAMODB_CACHE_TABLE: CacheTable

  createOrder:
    handler: src/handlers/createOrder.createOrder
    memorySize: 1024        
    timeout: 10             
    tracing: true
    events:
      - httpApi:
          path: /order
          method: post
    environment:
      DYNAMODB_TABLE2: Orders

resources:
  Resources:
    HttpApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/http-api/${self:service}-${self:provider.stage}
        RetentionInDays: 14
    StarWarsRequests:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: StarWarsRequests
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    Orders:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CacheTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
