service: serverless-http-api-typescript-dynamodb

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev
  tracing:
    lambda: true
    apiGateway: true
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
      allowCredentials: false
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/StarWarsRequests
        - arn:aws:dynamodb:${self:provider.region}:*:table/Orders
        - arn:aws:dynamodb:${self:provider.region}:*:table/CacheTable

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-dynamodb
  - serverless-api-gateway-throttling

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  apiGatewayThrottling:
    maxRequestsPerSecond: 2
    maxConcurrentRequests: 2

functions:
  merged:
    handler: src/handlers/merged.mergedHandler
    memorySize: 1024       
    timeout: 10             
    tracing: true
    events:
      - httpApi:
          path: /merged
          method: get
    environment:
      DYNAMODB_TABLE: StarWarsRequests
      DYNAMODB_CACHE_TABLE: CacheTable

  getHistory:
    handler: src/handlers/getHistory.getHistoryHandler
    memorySize: 1024        
    timeout: 10             
    tracing: true
    events:
      - httpApi:
          path: /history
          method: get
    environment:
      DYNAMODB_TABLE: StarWarsRequests
      DYNAMODB_CACHE_TABLE: CacheTable

  createOrder:
    handler: src/handlers/createOrder.createOrderHandler
    memorySize: 1024        
    timeout: 10             
    tracing: true
    events:
      - httpApi:
          path: /order
          method: post
    environment:
      DYNAMODB_TABLE2: Orders

  swagger:
    handler: src/handlers/swagger.swagger
    memorySize: 512
    timeout: 5
    events:
      - httpApi:
          path: /swagger.yaml
          method: get
  
  login:
    handler: src/handlers/authenticate.loginHandler
    memorySize: 1024
    timeout: 5
    events:
      - httpApi:
          path: /login
          method: post
    environment:
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}

resources:
  Resources:
    HttpApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/http-api/${self:service}-${self:provider.stage}
        RetentionInDays: 14
    StarWarsRequests:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: StarWarsRequests
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    Orders:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CacheTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
